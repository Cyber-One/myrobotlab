#ifndef ArduinoMsgCodec_h
#define ArduinoMsgCodec_h

/*******************************************************************
 * MRLCOMM FUNCTION GENERATED INTERFACE
 * this file was generated by ArduinoMsgCodec and ArduinoMsgCodec.h.template
 */

///// INO GENERATED DEFINITION BEGIN //////
// {publishMRLCommError Integer} 
#define PUBLISH_MRLCOMM_ERROR		1
// {getVersion} 
#define GET_VERSION		2
// {publishVersion Integer} 
#define PUBLISH_VERSION		3
// {analogWrite int int} 
#define ANALOG_WRITE		4
// {controllerAttach Arduino int} 
#define CONTROLLER_ATTACH		5
// {createI2cDevice I2CControl int int} 
#define CREATE_I2C_DEVICE		6
// {deviceAttach DeviceControl Object[]} 
#define DEVICE_ATTACH		7
// {deviceDetach DeviceControl} 
#define DEVICE_DETACH		8
// {digitalWrite int int} 
#define DIGITAL_WRITE		9
// {disableBoardStatus} 
#define DISABLE_BOARD_STATUS		10
// {disablePin int} 
#define DISABLE_PIN		11
// {disablePins} 
#define DISABLE_PINS		12
// {enableBoardStatus int} 
#define ENABLE_BOARD_STATUS		13
// {enablePin int} 
#define ENABLE_PIN		14
// {getMrlPinType PinDefinition} 
#define GET_MRL_PIN_TYPE		15
// {heartbeat} 
#define HEARTBEAT		16
// {i2cRead I2CControl int int byte[] int} 
#define I2C_READ		17
// {i2cReturnData SensorData} 
#define I2C_RETURN_DATA		18
// {i2cWrite I2CControl int int byte[] int} 
#define I2C_WRITE		19
// {i2cWriteRead I2CControl int int byte[] int byte[] int} 
#define I2C_WRITE_READ		20
// {intsToString int[] int int} 
#define INTS_TO_STRING		21
// {isAttached} 
#define IS_ATTACHED		22
// {motorMove MotorControl} 
#define MOTOR_MOVE		23
// {motorMoveTo MotorControl} 
#define MOTOR_MOVE_TO		24
// {motorReset MotorControl} 
#define MOTOR_RESET		25
// {motorStop MotorControl} 
#define MOTOR_STOP		26
// {msgRoute} 
#define MSG_ROUTE		27
// {neoPixelSetAnimation NeoPixel int int int int int} 
#define NEO_PIXEL_SET_ANIMATION		28
// {neoPixelWriteMatrix NeoPixel List} 
#define NEO_PIXEL_WRITE_MATRIX		29
// {onSensorData SensorData} 
#define ON_SENSOR_DATA		30
// {pinMode int int} 
#define PIN_MODE		31
// {publishAttachedDevice String} 
#define PUBLISH_ATTACHED_DEVICE		32
// {publishBoardInfo BoardInfo} 
#define PUBLISH_BOARD_INFO		33
// {publishBoardStatus BoardStatus} 
#define PUBLISH_BOARD_STATUS		34
// {publishDebug String} 
#define PUBLISH_DEBUG		35
// {publishMessageAck} 
#define PUBLISH_MESSAGE_ACK		36
// {publishPin PinData} 
#define PUBLISH_PIN		37
// {publishPinArray PinData[]} 
#define PUBLISH_PIN_ARRAY		38
// {publishPinDefinition PinDefinition} 
#define PUBLISH_PIN_DEFINITION		39
// {publishPulse Long} 
#define PUBLISH_PULSE		40
// {publishPulseStop Integer} 
#define PUBLISH_PULSE_STOP		41
// {publishSensorData SensorData} 
#define PUBLISH_SENSOR_DATA		42
// {publishServoEvent Integer} 
#define PUBLISH_SERVO_EVENT		43
// {publishTrigger Pin} 
#define PUBLISH_TRIGGER		44
// {pulse int int int int} 
#define PULSE		45
// {pulseStop} 
#define PULSE_STOP		46
// {read String} 
#define READ		47
// {releaseI2cDevice I2CControl int int} 
#define RELEASE_I2C_DEVICE		48
// {sensorActivate SensorControl Object[]} 
#define SENSOR_ACTIVATE		49
// {sensorDeactivate SensorControl} 
#define SENSOR_DEACTIVATE		50
// {sensorPollingStart String} 
#define SENSOR_POLLING_START		51
// {sensorPollingStop String} 
#define SENSOR_POLLING_STOP		52
// {servoAttach ServoControl int} 
#define SERVO_ATTACH		53
// {servoDetach ServoControl} 
#define SERVO_DETACH		54
// {servoSetMaxVelocity ServoControl} 
#define SERVO_SET_MAX_VELOCITY		55
// {servoSetSpeed ServoControl} 
#define SERVO_SET_SPEED		56
// {servoSweepStart ServoControl} 
#define SERVO_SWEEP_START		57
// {servoSweepStop ServoControl} 
#define SERVO_SWEEP_STOP		58
// {servoWrite ServoControl} 
#define SERVO_WRITE		59
// {servoWriteMicroseconds ServoControl int} 
#define SERVO_WRITE_MICROSECONDS		60
// {setBoardMegaADK} 
#define SET_BOARD_MEGA_ADK		61
// {setDebounce int} 
#define SET_DEBOUNCE		62
// {setDebug boolean} 
#define SET_DEBUG		63
// {setDigitalTriggerOnly Boolean} 
#define SET_DIGITAL_TRIGGER_ONLY		64
// {setPWMFrequency Integer Integer} 
#define SET_PWMFREQUENCY		65
// {setSampleRate int} 
#define SET_SAMPLE_RATE		66
// {setSerialRate int} 
#define SET_SERIAL_RATE		67
// {setTrigger int int int} 
#define SET_TRIGGER		68
// {softReset} 
#define SOFT_RESET		69
// {write int int} 
#define WRITE		70
///// INO GENERATED DEFINITION END //////


/*******************************************************************
 * serial protocol functions
 */
#define MAGIC_NUMBER            170 // 10101010


/*******************************************************************
 * BOARD TYPE
 */
#define BOARD_TYPE_ID_UNKNOWN 0
#define BOARD_TYPE_ID_MEGA    1
#define BOARD_TYPE_ID_UNO     2

#if defined(ARDUINO_AVR_MEGA2560) || defined(ARDUINO_AVR_ADK)
  #define BOARD BOARD_TYPE_ID_MEGA
#elif defined(ARDUINO_AVR_UNO)
  #define BOARD BOARD_TYPE_ID_UNO
#else
  #define BOARD BOARD_TYPE_ID_UNKNOWN
#endif

#endif
